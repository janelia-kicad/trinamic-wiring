#+EXPORT_FILE_NAME: README.md
#+OPTIONS: toc:nil |:t ^:nil tags:nil

#+NAME: name
#+BEGIN_SRC text :exports none :noweb yes
trinamic_wiring
#+END_SRC

#+NAME: version
#+BEGIN_SRC text :exports none :noweb yes
0.1.0
#+END_SRC

#+NAME: release-month-day
#+BEGIN_SRC text :exports none :noweb yes
11-02
#+END_SRC

#+NAME: release-year
#+BEGIN_SRC text :exports none :noweb yes
2022
#+END_SRC

#+NAME: release-date
#+BEGIN_SRC text :exports none :noweb yes
<<release-year>>-<<release-month-day>>
#+END_SRC

#+NAME: creation-date
#+BEGIN_SRC text :exports none :noweb yes
2022-11-02
#+END_SRC

#+NAME: description
#+BEGIN_SRC text :exports none :noweb yes
Wiring documentation for various Trinamic devices and ICs.
#+END_SRC

#+NAME: license
#+BEGIN_SRC text :exports none :noweb yes
Janelia Research Campus Open-Source Hardware
#+END_SRC

#+NAME: guix-license
#+BEGIN_SRC text :exports none :noweb yes
nil
#+END_SRC

#+NAME: license-files
#+BEGIN_SRC text :exports none :noweb yes
LICENSE
#+END_SRC

#+NAME: repository-name
#+BEGIN_SRC text :exports none :noweb yes
trinamic_wiring
#+END_SRC

#+NAME: guix-name
#+BEGIN_SRC text :exports none :noweb yes
nil
#+END_SRC

#+NAME: repository-url
#+BEGIN_SRC text :exports none :noweb yes
https://github.com/janelia-kicad/<<repository-name>>
#+END_SRC

#+NAME: code-repository
#+BEGIN_SRC text :exports none :noweb yes
git+<<repository-url>>.git
#+END_SRC

#+NAME: author-given-name
#+BEGIN_SRC text :exports none :noweb yes
Peter
#+END_SRC

#+NAME: author-family-name
#+BEGIN_SRC text :exports none :noweb yes
Polidoro
#+END_SRC

#+NAME: author
#+BEGIN_SRC text :exports none :noweb yes
<<author-given-name>> <<author-family-name>>
#+END_SRC

#+NAME: email
#+BEGIN_SRC text :exports none :noweb yes
peter@polidoro.io
#+END_SRC

#+NAME: affiliation
#+BEGIN_SRC text :exports none :noweb yes
Howard Hughes Medical Institute
#+END_SRC

#+NAME: copyright
#+BEGIN_SRC text :exports none :noweb yes
<<release-year>> <<affiliation>>
#+END_SRC

#+NAME: programming-language
#+BEGIN_SRC text :exports none :noweb yes
KiCad
#+END_SRC

#+NAME: guix-dependencies
#+BEGIN_SRC text :exports none :noweb yes
nil
#+END_SRC

#+NAME: references
#+BEGIN_SRC text :exports none :noweb yes
https://www.trinamic.com/
#+END_SRC

#+NAME: command-line-interface
#+BEGIN_SRC text :exports none :noweb yes
nil
#+END_SRC

#+BEGIN_EXAMPLE
<!---
This file is generated automatically from .metadata.org
File edits may be overwritten!
--->
#+END_EXAMPLE

* About

#+BEGIN_SRC markdown :noweb yes
- Name: <<name>>
- Description: <<description>>
- Version: <<version>>
- Date: <<release-date>>
- License: <<license>>
- URL: <<repository-url>>
- Author: <<author>>
- Email: <<email>>
- Copyright: <<copyright>>
- References:
  - <<references>>
#+END_SRC

* Wiring



* Development

** Install Guix

[[https://guix.gnu.org/manual/en/html_node/Binary-Installation.html][Install Guix]]

** Clone Repository

#+BEGIN_SRC sh :noweb yes
git clone <<repository-url>>
cd <<repository-name>>
#+END_SRC

** Edit .metadata.org

#+BEGIN_SRC sh :noweb yes
make metadata-edits
#+END_SRC

** Tangle .metadata.org

#+BEGIN_SRC sh :noweb yes
make metadata
#+END_SRC

** Edit files

#+BEGIN_SRC sh :noweb yes
make file-edits
exit
#+END_SRC

* Tangled Files                                                    :noexport:

#+BEGIN_SRC text :tangle AUTHORS :exports none :noweb yes
<<author>>
#+END_SRC

#+BEGIN_SRC text :tangle LICENSE :exports none :noweb yes
License Agreement
Janelia Research Campus Open-Source Hardware

By downloading, using and/or viewing these designs, documentation and related
data and information, and all content in the foregoing (collectively, the
“Designs”), you agree to the following:

You may use, copy, modify, display and distribute the Designs for any
non-commercial research or educational purpose.

THE DESIGNS ARE PROTOTYPES AND ARE EXPERIMENTAL IN NATURE AND SHOULD BE USED
WITH PRUDENCE AND APPROPRIATE CAUTION, AS NOT ALL OF THE CHARACTERISTICS ARE
KNOWN. THE DESIGNS ARE PROVIDED “AS-IS” WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES OF ANY KIND (INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF
MERCHANTABILITY, NON-INFRINGEMENT, TITLE, ACCURACY, OR FITNESS FOR A PARTICULAR
PURPOSE, AND ANY WARRANTIES ARISING FROM COURSE OF PERFORMANCE, COURSE OF
DEALING, COURSE OF CONDUCT, OR USAGE OF TRADE) OR CONDITIONS OF ANY KIND,
WHETHER EXPRESS OR IMPLIED OR STATUTORY. NO OPINION, ADVICE OR STATEMENT OF THE
HOWARD HUGHES MEDICAL INSTITUTE (“HHMI”) OR ITS TRUSTEES, EMPLOYEES, AGENTS,
LICENSORS OR SUPPLIERS, WHETHER MADE WITHIN THE DESIGNS OR OTHERWISE, SHALL
CREATE ANY WARRANTY. HHMI MAKES NO WARRANTY THAT THE DESIGNS WILL BE ACCURATE,
CURRENT OR RELIABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF CERTAIN
WARRANTIES OR CONDITIONS, AND AS A CONSEQUENCE SOME OF THE ABOVE DISCLAIMERS MAY
NOT APPLY TO YOU.

IN NO EVENT SHALL HHMI OR ITS TRUSTEES, EMPLOYEES, AGENTS, LICENSORS OR
SUPPLIERS (THE “HHMI PARTIES”) BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, CONSEQUENTIAL, OR PUNITIVE DAMAGES OR LOSSES OF ANY KIND
(INCLUDING, BUT NOT LIMITED TO, ANY PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, BUSINESS, GOODWILL, DATA, REVENUE, OR PROFITS; REASONABLE
ROYALTIES; BUSINESS INTERRUPTION; OR OTHER INTANGIBLE LOSSES) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, TORT
(INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE, ARISING IN ANY WAY OUT
OF THE USE OF, OR INABILITY TO USE, THE DESIGNS, OR FOR ANY OTHER CLAIM RELATED
IN ANY WAY TO YOUR USE OF THE DESIGNS OR YOUR INTERACTIONS WITH HHMI, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE OR LOSS, AND NOTWITHSTANDING THE
FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY. YOU ACKNOWLEDGE THAT THESE
LIMITATIONS ARE REASONABLE, THAT THEY ARE AN ESSENTIAL ELEMENT HEREOF, AND THAT
ABSENT SUCH LIMITATIONS, HHMI WOULD NOT MAKE THE DESIGNS AVAILABLE TO YOU OR
ENTER INTO THESE TERMS AND CONDITIONS. YOU REMAIN RESPONSIBLE FOR ALL LEGAL
COMPLIANCE WITH RESPECT TO YOUR USAGE OF THE DESIGNS. SOME JURISDICTIONS DO NOT
ALLOW THE LIMITATION OF LIABILITY FOR INCIDENTAL OR CONSEQUENTIAL DAMAGES, AND
AS A CONSEQUENCE SOME OF THE ABOVE LIMITATIONS MAY NOT APPLY TO YOU; IN SUCH
JURISDICTIONS, THE LIABILITY OF THE HHMI PARTIES SHALL BE LIMITED TO THE FULLEST
EXTENT PERMITTED BY LAW.

Any redistribution of the Designs must contain or reference these terms.
#+END_SRC

#+BEGIN_SRC js :tangle codemeta.json :exports none :noweb yes
{
    "@context": "https://doi.org/10.5063/schema/codemeta-2.0",
    "@type": "SoftwareSourceCode",
    "license": "https://spdx.org/licenses/<<license>>",
    "codeRepository": "<<code-repository>>",
    "dateCreated": "<<creation-date>>",
    "dateModified": "<<release-date>>",
    "name": "<<name>>",
    "version": "<<version>>",
    "description": "<<description>>",
    "programmingLanguage": [
        "<<programming-language>>"
    ],
    "author": [
        {
            "@type": "Person",
            "givenName": "<<author-given-name>>",
            "familyName": "<<author-family-name>>",
            "email": "<<email>>",
            "affiliation": {
                "@type": "Organization",
                "name": "<<affiliation>>"
            }
        }
    ]
}
#+END_SRC

#+BEGIN_SRC scheme :tangle .channels.scm :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(list (channel
        (name 'guix)
        (url "https://git.savannah.gnu.org/git/guix.git")
        (branch "master")
        (commit
          "a0751e3250dfea7e52468c8090e18c3118d93a60")
        (introduction
          (make-channel-introduction
            "9edb3f66fd807b096b48283debdcddccfea34bad"
            (openpgp-fingerprint
              "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+END_SRC

#+BEGIN_SRC scheme :tangle .manifest.scm :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(specifications->manifest
 '("kicad"
   "kicad-doc"
   "kicad-symbols"
   "kicad-footprints"
   "kicad-packages3d"
   "kicad-templates"
   "make"
   "bash"
   "git"
   "imagemagick"
   "graphicsmagick"
   "emacs"
   "emacs-org"
   "emacs-ox-gfm"))
#+END_SRC

#+BEGIN_SRC text :tangle Makefile :exports none :noweb yes
# This file is generated automatically from .metadata.org
# File edits may be overwritten!

upload: metadata package twine add clean

GUIX-SHELL = guix time-machine -C .channels.scm -- shell -m .manifest.scm
GUIX-CONTAINER = $(GUIX-SHELL) --container
GUIX-CONTAINER-GUI = $(GUIX-CONTAINER) -E "^DISPLAY$$" -E "^XAUTHORITY$$" --expose="$$XAUTHORITY" --expose=/tmp/.X11-unix/ --expose=$$HOME/.Xauthority --expose=/etc/machine-id

metadata-edits:
	$(GUIX-CONTAINER-GUI) -- sh -c "emacs -q --no-site-file --no-site-lisp --no-splash -l .init.el --file .metadata.org"

metadata:
	$(GUIX-CONTAINER) -- sh -c "emacs --batch -Q  -l .init.el --eval '(process-org \".metadata.org\")'"

file-edits:
	$(GUIX-SHELL) --pure -- kicad

add:
	$(GUIX-CONTAINER) -- sh -c "git add --all"

clean:
	$(GUIX-CONTAINER) -- sh -c "git clean -xdf"

images-from-pdfs:
	rm ./<<name>>/*.png && $(GUIX-CONTAINER) -- sh -c "convert ./<<name>>/*.pdf -font Liberation-Sans -density 300 -depth 8 -quality 85 ./<<name>>/image%02d.png"
#+END_SRC

#+BEGIN_SRC scheme :tangle .init.el :exports none :noweb yes
;; This file is generated automatically from .metadata.org
;; File edits may be overwritten!
(require 'org)

(eval-after-load "org"
  '(require 'ox-gfm nil t))

(setq make-backup-files nil)
(setq org-confirm-babel-evaluate nil)

(setq python-indent-guess-indent-offset t)
(setq python-indent-guess-indent-offset-verbose nil)

(defun tangle-org (org-file)
  "Tangle org file"
  (unless (string= "org" (file-name-extension org-file))
    (error "INFILE must be an org file."))
  (org-babel-tangle-file org-file))

(defun export-org (org-file)
  "Export org file to gfm file"
  (unless (string= "org" (file-name-extension org-file))
    (error "INFILE must be an org file."))
  (let ((org-file-buffer (find-file-noselect org-file)))
    (with-current-buffer org-file-buffer
      (org-open-file (org-gfm-export-to-markdown)))))

(defun process-org (org-file)
  "Tangle and export org file"
  (progn (tangle-org org-file)
         (export-org org-file)))

#+END_SRC

